#!/usr/bin/env python3
import os
import sys
import json
import subprocess
import requests
from pathlib import Path
from getpass import getpass

CONFIG_FILE = Path.home() / ".neo"
INSTALL_DIR = Path(__file__).resolve().parent
VENV_DIR = INSTALL_DIR / "venv"
PYTHON_PATH = VENV_DIR / "bin/python"
NEO_SCRIPT = INSTALL_DIR / "neo"
LAUNCHER = Path("/usr/local/bin/neo")

GREEN = "\033[0;92m"
NC = "\033[0m"

def load_config():
    config = {}
    if CONFIG_FILE.exists():
        with open(CONFIG_FILE) as f:
            for line in f:
                if "=" in line:
                    k, v = line.strip().split("=", 1)
                    config[k] = v
    return config

def save_config(config):
    with open(CONFIG_FILE, "w") as f:
        for k, v in config.items():
            f.write(f"{k}={v}\n")

def list_ollama_models():
    try:
        response = requests.get("http://localhost:11434/api/tags")
        response.raise_for_status()
        data = response.json()
        return [model["name"] for model in data.get("models", [])]
    except Exception as e:
        print(f"[Erro ao listar modelos Ollama]: {e}")
        return []

def list_openai_models(api_key):
    try:
        import openai
        openai.api_key = api_key
        models = openai.Model.list()
        return sorted([m.id for m in models.data if "gpt" in m.id])
    except Exception as e:
        print(f"[Erro ao listar modelos OpenAI]: {e}")
        return []

def choose_model(models):
    if not models:
        print("Nenhum modelo disponível.")
        sys.exit(1)

    print("\nModelos disponíveis:")
    for i, model in enumerate(models, 1):
        print(f"{i}) {model}")

    while True:
        choice = input("Escolha o número do modelo desejado: ").strip()
        if choice.isdigit() and 1 <= int(choice) <= len(models):
            return models[int(choice) - 1]
        print("Escolha inválida. Tente novamente.")

def create_venv():
    if not PYTHON_PATH.exists():
        print("🔧 Criando ambiente virtual em:", VENV_DIR)
        subprocess.run(["python3", "-m", "venv", str(VENV_DIR)], check=True)

def install_dependencies():
    print("📦 Instalando/atualizando dependências...")
    subprocess.run([str(PYTHON_PATH), "-m", "pip", "install", "--upgrade", "pip"], check=True)
    subprocess.run([str(PYTHON_PATH), "-m", "pip", "install", "-r", str(INSTALL_DIR / "requirements.txt")], check=True)

def create_launcher():
    print("🚀 Instalando comando global 'neo'...")
    launcher_script = f"#!/bin/bash\n{PYTHON_PATH} {NEO_SCRIPT} \"$@\""
    subprocess.run(["sudo", "bash", "-c", f"echo '{launcher_script}' > {LAUNCHER}"], check=True)
    subprocess.run(["sudo", "chmod", "+x", str(LAUNCHER)], check=True)

def configure(use_ollama=None):
    config = load_config()

    if use_ollama is None:
        use_ollama = input("Deseja usar o Ollama local? (s/n): ").strip().lower() == "s"

    config["NEO_USE_OLLAMA"] = "true" if use_ollama else "false"

    if use_ollama:
        models = list_ollama_models()
        config["NEO_MODEL"] = choose_model(models)
        host = input("Host do Ollama [default: http://localhost:11434]: ").strip()
        config["NEO_OLLAMA_HOST"] = host or "http://localhost:11434"
    else:
        key = getpass("Chave da API do OpenAI: ").strip()
        config["NEO_API_KEY"] = key
        models = list_openai_models(key)
        config["NEO_MODEL"] = choose_model(models)

    context = input("Deseja adicionar um contexto inicial para a IA? (pressione Enter para pular): ").strip()
    if context:
        config["NEO_CONTEXT"] = context

    save_config(config)

def handle_update_command(args):
    config = load_config()

    if len(args) >= 2 and args[0] == "use":
        if args[1] == "ollama":
            configure(use_ollama=True)
        elif args[1] == "openai":
            configure(use_ollama=False)
        else:
            print("[ERRO] Uso: install.py update use [ollama|openai]")
        return

    if len(args) >= 2 and args[0] == "model":
        if args[1] == "ollama":
            models = list_ollama_models()
            config["NEO_MODEL"] = choose_model(models)
            config["NEO_USE_OLLAMA"] = "true"
            save_config(config)
        elif args[1] == "openai":
            key = config.get("NEO_API_KEY")
            if not key:
                print("[ERRO] API key do OpenAI não encontrada. Configure com 'update use openai' primeiro.")
                return
            models = list_openai_models(key)
            config["NEO_MODEL"] = choose_model(models)
            config["NEO_USE_OLLAMA"] = "false"
            save_config(config)
        else:
            print("[ERRO] Uso: install.py update model [ollama|openai]")
        return

    if args[0] == "log" and args[1] == "debug":
        config["NEO_LOG_DEBUG"] = "true"
        save_config(config)
        print("✔ Log de debug ativado.")
        return

    if args[0] == "context":
        new_context = input("Novo contexto para a IA: ").strip()
        if new_context:
            config["NEO_CONTEXT"] = new_context
            save_config(config)
            print("✔ Contexto atualizado.")
        else:
            print("[INFO] Contexto não alterado.")
        return

    print("[ERRO] Comando update inválido. Use 'install.py help' para ver os comandos disponíveis.")
def print_config_info():
    config = load_config()
    if not config:
        print("⚠️ Nenhuma configuração encontrada.")
        return

    print(f"\n{GREEN}📄 Informações de Configuração:{NC}")
    for k, v in config.items():
        print(f"{k}: {v}")

def main():
    if len(sys.argv) > 1:
        cmd = sys.argv[1]

        if cmd in {"help", "/?", "-h"}:
            print(GREEN)
            print("NEO - Matrix CLI AI Installer")
            print(NC)
            print("Uso:")
            print("  install.py                           → Instala ou atualiza o projeto")
            print("  install.py help                      → Mostra esta ajuda")
            print("  install.py info                      → Mostra as configurações atuais")
            print("  install.py update use ollama        → Define Ollama como provedor e escolhe modelo")
            print("  install.py update use openai        → Define OpenAI como provedor e escolhe modelo")
            print("  install.py update model ollama      → Altera o modelo Ollama usado atualmente")
            print("  install.py update model openai      → Altera o modelo OpenAI usado atualmente")
            print("  install.py update context           → Define ou atualiza o contexto da IA")
            print("  install.py update log debug         → Ativa o log de debug")
            sys.exit(0)

        if cmd == "info":
            print_config_info()
            sys.exit(0)

        if cmd == "update":
            handle_update_command(sys.argv[2:])
            sys.exit(0)

if __name__ == "__main__":
    main()